// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/spacelift-io/spacelift-operator/internal/spacelift/models"
	mock "github.com/stretchr/testify/mock"

	v1beta1 "github.com/spacelift-io/spacelift-operator/api/v1beta1"
)

// StackRepository is an autogenerated mock type for the StackRepository type
type StackRepository struct {
	mock.Mock
}

type StackRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *StackRepository) EXPECT() *StackRepository_Expecter {
	return &StackRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *StackRepository) Create(_a0 context.Context, _a1 *v1beta1.Stack) (*models.Stack, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *models.Stack
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta1.Stack) (*models.Stack, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta1.Stack) *models.Stack); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Stack)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1beta1.Stack) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StackRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type StackRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *v1beta1.Stack
func (_e *StackRepository_Expecter) Create(_a0 interface{}, _a1 interface{}) *StackRepository_Create_Call {
	return &StackRepository_Create_Call{Call: _e.mock.On("Create", _a0, _a1)}
}

func (_c *StackRepository_Create_Call) Run(run func(_a0 context.Context, _a1 *v1beta1.Stack)) *StackRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1beta1.Stack))
	})
	return _c
}

func (_c *StackRepository_Create_Call) Return(_a0 *models.Stack, _a1 error) *StackRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StackRepository_Create_Call) RunAndReturn(run func(context.Context, *v1beta1.Stack) (*models.Stack, error)) *StackRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: _a0, _a1
func (_m *StackRepository) Get(_a0 context.Context, _a1 *v1beta1.Stack) (*models.Stack, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *models.Stack
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta1.Stack) (*models.Stack, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta1.Stack) *models.Stack); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Stack)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1beta1.Stack) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StackRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type StackRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *v1beta1.Stack
func (_e *StackRepository_Expecter) Get(_a0 interface{}, _a1 interface{}) *StackRepository_Get_Call {
	return &StackRepository_Get_Call{Call: _e.mock.On("Get", _a0, _a1)}
}

func (_c *StackRepository_Get_Call) Run(run func(_a0 context.Context, _a1 *v1beta1.Stack)) *StackRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1beta1.Stack))
	})
	return _c
}

func (_c *StackRepository_Get_Call) Return(_a0 *models.Stack, _a1 error) *StackRepository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StackRepository_Get_Call) RunAndReturn(run func(context.Context, *v1beta1.Stack) (*models.Stack, error)) *StackRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: _a0, _a1
func (_m *StackRepository) Update(_a0 context.Context, _a1 *v1beta1.Stack) (*models.Stack, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *models.Stack
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta1.Stack) (*models.Stack, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v1beta1.Stack) *models.Stack); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Stack)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v1beta1.Stack) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StackRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type StackRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *v1beta1.Stack
func (_e *StackRepository_Expecter) Update(_a0 interface{}, _a1 interface{}) *StackRepository_Update_Call {
	return &StackRepository_Update_Call{Call: _e.mock.On("Update", _a0, _a1)}
}

func (_c *StackRepository_Update_Call) Run(run func(_a0 context.Context, _a1 *v1beta1.Stack)) *StackRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*v1beta1.Stack))
	})
	return _c
}

func (_c *StackRepository_Update_Call) Return(_a0 *models.Stack, _a1 error) *StackRepository_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *StackRepository_Update_Call) RunAndReturn(run func(context.Context, *v1beta1.Stack) (*models.Stack, error)) *StackRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewStackRepository creates a new instance of StackRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStackRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *StackRepository {
	mock := &StackRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
