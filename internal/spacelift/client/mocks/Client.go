// Code generated by mockery v2.40.2. DO NOT EDIT.

package mocks

import (
	context "context"

	graphql "github.com/shurcooL/graphql"
	mock "github.com/stretchr/testify/mock"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

type Client_Expecter struct {
	mock *mock.Mock
}

func (_m *Client) EXPECT() *Client_Expecter {
	return &Client_Expecter{mock: &_m.Mock}
}

// Mutate provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Client) Mutate(_a0 context.Context, _a1 interface{}, _a2 map[string]interface{}, _a3 ...graphql.RequestOption) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Mutate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, map[string]interface{}, ...graphql.RequestOption) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_Mutate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Mutate'
type Client_Mutate_Call struct {
	*mock.Call
}

// Mutate is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 interface{}
//   - _a2 map[string]interface{}
//   - _a3 ...graphql.RequestOption
func (_e *Client_Expecter) Mutate(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 ...interface{}) *Client_Mutate_Call {
	return &Client_Mutate_Call{Call: _e.mock.On("Mutate",
		append([]interface{}{_a0, _a1, _a2}, _a3...)...)}
}

func (_c *Client_Mutate_Call) Run(run func(_a0 context.Context, _a1 interface{}, _a2 map[string]interface{}, _a3 ...graphql.RequestOption)) *Client_Mutate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]graphql.RequestOption, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(graphql.RequestOption)
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), args[2].(map[string]interface{}), variadicArgs...)
	})
	return _c
}

func (_c *Client_Mutate_Call) Return(_a0 error) *Client_Mutate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_Mutate_Call) RunAndReturn(run func(context.Context, interface{}, map[string]interface{}, ...graphql.RequestOption) error) *Client_Mutate_Call {
	_c.Call.Return(run)
	return _c
}

// Query provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Client) Query(_a0 context.Context, _a1 interface{}, _a2 map[string]interface{}, _a3 ...graphql.RequestOption) error {
	_va := make([]interface{}, len(_a3))
	for _i := range _a3 {
		_va[_i] = _a3[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0, _a1, _a2)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, map[string]interface{}, ...graphql.RequestOption) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type Client_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 interface{}
//   - _a2 map[string]interface{}
//   - _a3 ...graphql.RequestOption
func (_e *Client_Expecter) Query(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 ...interface{}) *Client_Query_Call {
	return &Client_Query_Call{Call: _e.mock.On("Query",
		append([]interface{}{_a0, _a1, _a2}, _a3...)...)}
}

func (_c *Client_Query_Call) Run(run func(_a0 context.Context, _a1 interface{}, _a2 map[string]interface{}, _a3 ...graphql.RequestOption)) *Client_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]graphql.RequestOption, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(graphql.RequestOption)
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), args[2].(map[string]interface{}), variadicArgs...)
	})
	return _c
}

func (_c *Client_Query_Call) Return(_a0 error) *Client_Query_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_Query_Call) RunAndReturn(run func(context.Context, interface{}, map[string]interface{}, ...graphql.RequestOption) error) *Client_Query_Call {
	_c.Call.Return(run)
	return _c
}

// URL provides a mock function with given fields: _a0, _a1
func (_m *Client) URL(_a0 string, _a1 ...interface{}) string {
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _a1...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for URL")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string, ...interface{}) string); ok {
		r0 = rf(_a0, _a1...)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Client_URL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'URL'
type Client_URL_Call struct {
	*mock.Call
}

// URL is a helper method to define mock.On call
//   - _a0 string
//   - _a1 ...interface{}
func (_e *Client_Expecter) URL(_a0 interface{}, _a1 ...interface{}) *Client_URL_Call {
	return &Client_URL_Call{Call: _e.mock.On("URL",
		append([]interface{}{_a0}, _a1...)...)}
}

func (_c *Client_URL_Call) Run(run func(_a0 string, _a1 ...interface{})) *Client_URL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *Client_URL_Call) Return(_a0 string) *Client_URL_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_URL_Call) RunAndReturn(run func(string, ...interface{}) string) *Client_URL_Call {
	_c.Call.Return(run)
	return _c
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
